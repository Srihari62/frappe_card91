summary: Create tabAccount
tasks:
  - id: mysql_tabcustomer_one
    fn: com.gs.datastore
    args:
      datasource: mysql
      data:
        where:
          id: <% parseInt(inputs.body.customerId) %>
        select:
          status: true
      config:
        method: tabCustomer.findUnique

  - id: is_customer_exist   # Checking whether customer with specified id is existed or not
    fn: com.gs.switch 
    value: <% outputs.mysql_tabcustomer_one.data == null %> 
    cases:
      true:
      - id: customer_dosnt_exist
        fn: com.gs.return
        args: 
          code : 404 
          success: false 
          message: <% "Customer with id "+inputs.body.customerId + " Not found" %>
      false:
      - id: if_customer_active       # If customer exists, checking whether he is Active or not
        fn: com.gs.switch
        value: <% outputs.mysql_tabcustomer_one.data.status == "Active" %>
        cases:
          true:      # If customer is active check whether account number and account type is already exists
          - id: mysql_tabaccount_search
            fn: com.gs.datastore
            args:
              datasource: mysql
              data:
                where:
                  account_type: <% inputs.body.account_type %>
                  account_number: <% inputs.body.account_number %>
              config:
                method: tabAccount.findMany

          - id: is_account_exist # If account number and account type not already exists create a new account
            fn: com.gs.switch
            value: <% outputs.mysql_tabaccount_search.data.length == 0 %>
            cases:
              true:
              - id: mysql_tabaccount_create
                fn: com.gs.datastore
                args: 
                  datasource: mysql
                  data:
                    data: <% inputs.body %>
                  config:
                    method: tabAccount.create

              false:       # If account number and account type already exists return that already exists
              - id: acc_exists_err
                description: Return account exists
                fn: com.gs.return
                args:
                  code: 409
                  success: false
                  message: <% "Account Number " + inputs.body.account_number + " with the same Account Type " +inputs.body.account_type+ " already exists" %>

          false:   # If Customer is inactive return Inactive
          - id: step2
            description: Return hello world
            fn: com.gs.return
            args: 
              code: 403 
              success: false
              message: <% "Customer with id " + inputs.body.customerId + " is Inactive" %>    
              
    # defaults:
    #   id: default
    #   fn: com.gs.return
    #   args: <%inputs.body.default_return_val%> #coffee/js script for dyanmic evaluation. Wrapped in <% %>. Same as that used elsewhere in workflows for dynamic calculations and variable substitutions. For ex. as used in com.gs.transform and com.gs.return

